name: Mirror Bot CI
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  DO_image: registry.digitalocean.com/reddit-lemmy-mirror-bot/mirror-script:latest

jobs:
  #test:
  #  runs-on: ubuntu-latest
  #  steps:
  #  - name: Checkout repository
  #    uses: actions/checkout@v2
  #  - name: Set up python
  #    uses: actions/setup-python@v3
  #    with:
  #      python-version: 3.9
  #  - name: Install poetry
  #    uses: snok/install-poetry@v1
  #    with:
  #      version: 1.6.1
  #      virtualenvs-create: true
  #      virtualenvs-in-project: true
  #  - name: Install deps via poetry
  #    run: |
  #      poetry install --with=test && echo $(poetry show)
  #  - name: Run pytests
  #    run: poetry run pytest

  build:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    #- name: Generate dotenv file
    #  uses: shine1594/secrets-to-env-action@master
    #  with:
    #    secrets: ${{ toJSON(secrets) }}
    #    secrets_env: production
    # - name: Create .env file
    #   run: echo "${{ secrets.PROD_FULL_ENV_FILE }}" > .env
    # - name: Check .env
    #   run: echo $(head -1 .env) && echo $(tail -1 .env)
    - name: Make envfile
      uses: SpicyPizza/create-envfile@v2.0
      with:
        LEMMY_USERNAME: ${{ secrets.LEMMY_USERNAME }}
        LEMMY_PASSWORD: ${{ secrets.LEMMY_PASSWORD }}
        LEMMY_INSTANCE: ${{ secrets.LEMMY_INSTANCE }}
        LEMMY_COMMUNITY: ${{ secrets.LEMMY_COMMUNITY }}
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
        REDDIT_SUBREDDIT: ${{ secrets.REDDIT_SUBREDDIT }}
        DIGITAL_OCEAN_TOKEN: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
        FILESTACK_API_KEY: ${{ secrets.FILESTACK_API_KEY }}
        FILESTACK_APP_SECRET: ${{ secrets.FILESTACK_APP_SECRET }}
        FILESTACK_HANDLE_REFRESH: ${{ secrets.FILESTACK_HANDLE_REFRESH }}
        FILESTACK_HANDLE_BACKUP: ${{ secrets.FILESTACK_HANDLE_BACKUP }}
        file_name: .env
        fail_on_empty: true
        sort_keys: false

    - name: Check .env via action
      uses: the-coding-turtle/ga-file-list@v0.2
    - name: Build image
      run: docker build -t "${DO_image}" .
    - name: Save Docker image
      run: docker save --output image.tar "${DO_image}"
    - name: Temporarily save Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-artifact
        path: image.tar
        if-no-files-found: error
        retention-days: 1

  deploy:
    # if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Retrieve saved Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-artifact
        if-no-files-found: error
    - name: Load Docker image
      run: docker load --input image.tar
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITAL_OCEAN_TOKEN }}
    - name: Log into Digital Ocean Container Registry
      run: doctl registry login --expiry-seconds 600
    - name: Push image to Digital Ocean Container Registry
      run: docker push "${DO_image}"
